// User function Template for C++

class Solution{
public:
    void addSolution(vector<vector<int>>&ans, vector<vector<int>>&board, int n){
        vector<int>temp;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(board[j][i]){
                    temp.push_back(j+1);
                }
            }
        }
        ans.push_back(temp);
    }
    bool isSafe(int row, int col, vector<vector<int>>&board, int n ){
        int x =row;
        int y = col;
        //check row
        while(y>=0){
            if(board[x][y] == 1){
                return false;
            }
            y--;
        }
        
        x = row; 
        y = col;
        //check upper diagonal
        while(x>=0 && y>=0){
            if(board[x][y] == 1){
                return false;
            }
            x--;
            y--;
        }
        x = row; 
        y = col;
        //check lower diagonal
        while(x<n && y>=0){
            if(board[x][y] == 1){
                return false;
            }
            x++;
            y--;
        }
        return true;
        
    }
    void solve(int col, vector<vector<int>>&board, vector<vector<int>>&ans, int n){
        //base case
        if(col == n){
            addSolution(ans, board, n);
            return ;
        }
        for(int row=0; row<n; row++){
            if(isSafe(row, col, board, n)){
                board[row][col] = 1;
                solve(col+1, board, ans, n);
                board[row][col] = 0;
            }
        }
    }
    vector<vector<int>> nQueen(int n) {
        vector<vector<int>>board(n, vector<int>(n, 0));
        vector<vector<int>>ans;
        solve(0,board, ans, n);
        return ans;
    }
};
